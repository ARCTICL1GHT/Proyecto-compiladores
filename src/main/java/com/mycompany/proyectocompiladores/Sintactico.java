
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.proyectocompiladores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\006" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\006\000\002\004\005\000\002\004\005\000\002" +
    "\007\005\000\002\007\006\000\002\007\007\000\002\007" +
    "\006\000\002\005\004\000\002\005\005\000\002\041\003" +
    "\000\002\041\005\000\002\010\006\000\002\010\007\000" +
    "\002\010\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\004\000\002\011\004\000\002\015\007\000\002\015" +
    "\010\000\002\015\005\000\002\015\010\000\002\015\011" +
    "\000\002\015\006\000\002\015\007\000\002\015\007\000" +
    "\002\027\004\000\002\027\004\000\002\027\004\000\002" +
    "\016\007\000\002\016\006\000\002\016\010\000\002\016" +
    "\007\000\002\014\003\000\002\014\003\000\002\014\004" +
    "\000\002\014\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\006\004\000\002\006\006\000\002" +
    "\006\006\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\025\003\000\002\025\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\003\000\002\024\005\000\002\024" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\005" +
    "\000\002\021\005\000\002\030\010\000\002\030\007\000" +
    "\002\030\007\000\002\031\003\000\002\031\005\000\002" +
    "\033\012\000\002\033\007\000\002\033\011\000\002\033" +
    "\006\000\002\036\012\000\002\036\011\000\002\036\011" +
    "\000\002\036\010\000\002\036\011\000\002\036\010\000" +
    "\002\043\010\000\002\043\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\004\007\001\002\000\004\002\241\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufffe\004\007" +
    "\001\002\000\006\043\010\045\011\001\002\000\012\002" +
    "\ufffd\004\ufffd\005\014\006\015\001\002\000\012\002\ufff9" +
    "\004\ufff9\005\014\006\015\001\002\000\010\002\ufff7\004" +
    "\ufff7\006\015\001\002\000\006\002\ufff6\004\ufff6\001\002" +
    "\000\004\067\224\001\002\000\004\067\016\001\002\000" +
    "\004\035\017\001\002\000\012\002\uffeb\004\uffeb\045\020" +
    "\101\022\001\002\000\010\017\202\027\201\037\203\001" +
    "\002\000\014\002\uffea\004\uffea\006\uffea\045\020\101\022" +
    "\001\002\000\004\037\027\001\002\000\014\002\uffe9\004" +
    "\uffe9\006\uffe9\045\020\101\022\001\002\000\010\002\uffed" +
    "\004\uffed\006\015\001\002\000\006\002\uffec\004\uffec\001" +
    "\002\000\010\002\uffe7\004\uffe7\006\uffe7\001\002\000\004" +
    "\027\030\001\002\000\006\030\031\045\033\001\002\000" +
    "\032\002\uffda\004\uffda\006\uffda\007\061\012\062\013\056" +
    "\021\060\025\066\037\057\043\071\045\uffda\101\uffda\001" +
    "\002\000\004\030\054\001\002\000\004\037\034\001\002" +
    "\000\012\022\uffd0\030\uffd0\031\035\032\036\001\002\000" +
    "\004\045\033\001\002\000\006\037\041\102\037\001\002" +
    "\000\060\002\uffbc\004\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\021\uffbc\022\uffbc\025\uffbc" +
    "\030\uffbc\037\uffbc\043\uffbc\045\uffbc\047\046\050\042\051" +
    "\043\052\047\054\045\061\uffbc\101\uffbc\001\002\000\006" +
    "\022\uffce\030\uffce\001\002\000\060\002\uffbd\004\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\021\uffbd\022\uffbd\025\uffbd\030\uffbd\037\uffbd\043\uffbd\045" +
    "\uffbd\047\046\050\042\051\043\052\047\054\045\061\uffbd" +
    "\101\uffbd\001\002\000\006\037\uffc4\102\uffc4\001\002\000" +
    "\006\037\uffc3\102\uffc3\001\002\000\006\037\041\102\037" +
    "\001\002\000\006\037\uffc1\102\uffc1\001\002\000\006\037" +
    "\uffc5\102\uffc5\001\002\000\006\037\uffc2\102\uffc2\001\002" +
    "\000\046\002\uffbb\004\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\021\uffbb\022\uffbb\025\uffbb" +
    "\030\uffbb\037\uffbb\043\uffbb\045\uffbb\061\uffbb\101\uffbb\001" +
    "\002\000\006\037\041\102\037\001\002\000\046\002\uffba" +
    "\004\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\021\uffba\022\uffba\025\uffba\030\uffba\037\uffba" +
    "\043\uffba\045\uffba\061\uffba\101\uffba\001\002\000\006\022" +
    "\uffcf\030\uffcf\001\002\000\032\002\uffdb\004\uffdb\006\uffdb" +
    "\007\061\012\062\013\056\021\060\025\066\037\057\043" +
    "\071\045\uffdb\101\uffdb\001\002\000\014\002\uffd9\004\uffd9" +
    "\006\uffd9\045\uffd9\101\uffd9\001\002\000\010\037\041\073" +
    "\125\102\037\001\002\000\004\032\156\001\002\000\004" +
    "\045\033\001\002\000\006\037\105\102\037\001\002\000" +
    "\004\037\113\001\002\000\022\002\uffd1\004\uffd1\006\uffd1" +
    "\011\uffd1\014\uffd1\022\uffd1\045\uffd1\101\uffd1\001\002\000" +
    "\040\002\uffd7\004\uffd7\006\uffd7\007\061\011\uffd7\012\062" +
    "\013\056\014\uffd7\021\060\022\uffd7\025\066\037\057\043" +
    "\071\045\uffd7\101\uffd7\001\002\000\040\002\uffd6\004\uffd6" +
    "\006\uffd6\007\061\011\uffd6\012\062\013\056\014\uffd6\021" +
    "\060\022\uffd6\025\066\037\057\043\071\045\uffd6\101\uffd6" +
    "\001\002\000\020\007\061\012\062\013\056\021\060\025" +
    "\066\037\057\043\071\001\002\000\022\002\uffd2\004\uffd2" +
    "\006\uffd2\011\uffd2\014\uffd2\022\uffd2\045\uffd2\101\uffd2\001" +
    "\002\000\022\002\uffd3\004\uffd3\006\uffd3\011\uffd3\014\uffd3" +
    "\022\uffd3\045\uffd3\101\uffd3\001\002\000\004\037\072\001" +
    "\002\000\004\032\073\001\002\000\004\105\074\001\002" +
    "\000\004\043\075\001\002\000\004\027\076\001\002\000" +
    "\004\030\077\001\002\000\040\002\uffaf\004\uffaf\006\uffaf" +
    "\007\061\011\uffaf\012\062\013\056\014\uffaf\021\060\022" +
    "\uffaf\025\066\037\057\043\071\045\uffaf\101\uffaf\001\002" +
    "\000\022\002\uffb0\004\uffb0\006\uffb0\011\uffb0\014\uffb0\022" +
    "\uffb0\045\uffb0\101\uffb0\001\002\000\004\022\102\001\002" +
    "\000\006\037\105\102\037\001\002\000\044\002\uffb6\004" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\021\uffb6\022\uffb6\025\uffb6\037\uffb6\043\uffb6\045" +
    "\uffb6\061\uffb6\101\uffb6\001\002\000\040\002\uffb1\004\uffb1" +
    "\006\uffb1\007\061\011\uffb1\012\062\013\056\014\uffb1\021" +
    "\060\022\uffb1\025\066\037\057\043\071\045\uffb1\101\uffb1" +
    "\001\002\000\060\002\uffbd\004\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\021\uffbd\022\uffbd" +
    "\025\uffbd\037\uffbd\043\uffbd\045\uffbd\047\046\050\042\051" +
    "\043\052\047\054\045\061\uffbd\074\106\101\uffbd\001\002" +
    "\000\004\102\107\001\002\000\044\002\uffb5\004\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\021\uffb5\022\uffb5\025\uffb5\037\uffb5\043\uffb5\045\uffb5\061" +
    "\uffb5\101\uffb5\001\002\000\022\002\uffb3\004\uffb3\006\uffb3" +
    "\011\uffb3\014\uffb3\022\uffb3\045\uffb3\101\uffb3\001\002\000" +
    "\022\002\uffd5\004\uffd5\006\uffd5\011\uffd5\014\uffd5\022\uffd5" +
    "\045\uffd5\101\uffd5\001\002\000\022\002\uffd4\004\uffd4\006" +
    "\uffd4\011\uffd4\014\uffd4\022\uffd4\045\uffd4\101\uffd4\001\002" +
    "\000\040\002\uffc8\004\uffc8\006\uffc8\007\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\021\uffc8\022\uffc8\025\uffc8\037\uffc8" +
    "\043\uffc8\045\uffc8\101\uffc8\001\002\000\004\010\115\001" +
    "\002\000\022\007\061\012\062\013\056\014\120\021\060" +
    "\025\066\037\057\043\071\001\002\000\006\011\144\014" +
    "\120\001\002\000\004\011\143\001\002\000\010\037\123" +
    "\073\125\102\037\001\002\000\016\002\uffde\004\uffde\006" +
    "\uffde\011\uffde\045\uffde\101\uffde\001\002\000\016\002\uffdd" +
    "\004\uffdd\006\uffdd\011\uffdd\045\uffdd\101\uffdd\001\002\000" +
    "\032\002\uffbd\004\uffbd\006\uffbd\011\uffbd\045\uffbd\047\046" +
    "\050\042\051\043\052\047\054\045\074\131\101\uffbd\001" +
    "\002\000\016\002\uffdc\004\uffdc\006\uffdc\011\uffdc\045\uffdc" +
    "\101\uffdc\001\002\000\042\002\uffc0\004\uffc0\006\uffc0\007" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\021\uffc0\022\uffc0" +
    "\025\uffc0\031\126\037\uffc0\043\uffc0\045\uffc0\101\uffc0\001" +
    "\002\000\010\037\041\073\125\102\037\001\002\000\040" +
    "\002\uffbe\004\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\021\uffbe\022\uffbe\025\uffbe\037\uffbe\043\uffbe" +
    "\045\uffbe\101\uffbe\001\002\000\040\002\uffbf\004\uffbf\006" +
    "\uffbf\007\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\021\uffbf" +
    "\022\uffbf\025\uffbf\037\uffbf\043\uffbf\045\uffbf\101\uffbf\001" +
    "\002\000\006\027\132\037\133\001\002\000\004\030\142" +
    "\001\002\000\004\027\134\001\002\000\004\037\136\001" +
    "\002\000\004\030\141\001\002\000\020\002\uffef\004\uffef" +
    "\005\uffef\006\uffef\030\uffef\031\137\045\uffef\001\002\000" +
    "\004\037\136\001\002\000\016\002\uffee\004\uffee\005\uffee" +
    "\006\uffee\030\uffee\045\uffee\001\002\000\016\002\uffaa\004" +
    "\uffaa\006\uffaa\011\uffaa\045\uffaa\101\uffaa\001\002\000\016" +
    "\002\uffa9\004\uffa9\006\uffa9\011\uffa9\045\uffa9\101\uffa9\001" +
    "\002\000\022\002\uffb7\004\uffb7\006\uffb7\011\uffb7\014\uffb7" +
    "\022\uffb7\045\uffb7\101\uffb7\001\002\000\022\002\uffb8\004" +
    "\uffb8\006\uffb8\011\uffb8\014\uffb8\022\uffb8\045\uffb8\101\uffb8" +
    "\001\002\000\004\011\146\001\002\000\022\002\uffb9\004" +
    "\uffb9\006\uffb9\011\uffb9\014\uffb9\022\uffb9\045\uffb9\101\uffb9" +
    "\001\002\000\004\022\150\001\002\000\006\037\105\102" +
    "\037\001\002\000\004\061\152\001\002\000\004\102\153" +
    "\001\002\000\004\025\154\001\002\000\040\002\uffb2\004" +
    "\uffb2\006\uffb2\007\061\011\uffb2\012\062\013\056\014\uffb2" +
    "\021\060\022\uffb2\025\066\037\057\043\071\045\uffb2\101" +
    "\uffb2\001\002\000\022\002\uffb4\004\uffb4\006\uffb4\011\uffb4" +
    "\014\uffb4\022\uffb4\045\uffb4\101\uffb4\001\002\000\016\037" +
    "\041\073\125\102\037\103\163\104\160\105\161\001\002" +
    "\000\040\002\uffcb\004\uffcb\006\uffcb\007\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\021\uffcb\022\uffcb\025\uffcb\037\uffcb" +
    "\043\uffcb\045\uffcb\101\uffcb\001\002\000\040\002\uffc6\004" +
    "\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\021\uffc6\022\uffc6\025\uffc6\037\uffc6\043\uffc6\045\uffc6\101" +
    "\uffc6\001\002\000\006\043\165\045\166\001\002\000\040" +
    "\002\uffcd\004\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\021\uffcd\022\uffcd\025\uffcd\037\uffcd\043\uffcd" +
    "\045\uffcd\101\uffcd\001\002\000\040\002\uffc7\004\uffc7\006" +
    "\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\021\uffc7" +
    "\022\uffc7\025\uffc7\037\uffc7\043\uffc7\045\uffc7\101\uffc7\001" +
    "\002\000\040\002\uffcc\004\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\021\uffcc\022\uffcc\025\uffcc\037" +
    "\uffcc\043\uffcc\045\uffcc\101\uffcc\001\002\000\004\027\172" +
    "\001\002\000\004\027\167\001\002\000\004\030\170\001" +
    "\002\000\040\002\uffab\004\uffab\006\uffab\007\061\011\uffab" +
    "\012\062\013\056\014\uffab\021\060\022\uffab\025\066\037" +
    "\057\043\071\045\uffab\101\uffab\001\002\000\022\002\uffac" +
    "\004\uffac\006\uffac\011\uffac\014\uffac\022\uffac\045\uffac\101" +
    "\uffac\001\002\000\004\030\173\001\002\000\040\002\uffad" +
    "\004\uffad\006\uffad\007\061\011\uffad\012\062\013\056\014" +
    "\uffad\021\060\022\uffad\025\066\037\057\043\071\045\uffad" +
    "\101\uffad\001\002\000\022\002\uffae\004\uffae\006\uffae\011" +
    "\uffae\014\uffae\022\uffae\045\uffae\101\uffae\001\002\000\040" +
    "\002\uffca\004\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\021\uffca\022\uffca\025\uffca\037\uffca\043\uffca" +
    "\045\uffca\101\uffca\001\002\000\040\002\uffc9\004\uffc9\006" +
    "\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\021\uffc9" +
    "\022\uffc9\025\uffc9\037\uffc9\043\uffc9\045\uffc9\101\uffc9\001" +
    "\002\000\014\002\uffd8\004\uffd8\006\uffd8\045\uffd8\101\uffd8" +
    "\001\002\000\010\002\uffe8\004\uffe8\006\uffe8\001\002\000" +
    "\004\030\221\001\002\000\004\027\216\001\002\000\004" +
    "\027\204\001\002\000\006\030\205\045\033\001\002\000" +
    "\022\007\061\012\062\013\056\014\120\021\060\025\066" +
    "\037\057\043\071\001\002\000\004\030\207\001\002\000" +
    "\022\007\061\012\062\013\056\014\120\021\060\025\066" +
    "\037\057\043\071\001\002\000\004\014\120\001\002\000" +
    "\014\002\uffe5\004\uffe5\006\uffe5\045\uffe5\101\uffe5\001\002" +
    "\000\014\002\uffe2\004\uffe2\006\uffe2\045\uffe2\101\uffe2\001" +
    "\002\000\004\014\120\001\002\000\014\002\uffe6\004\uffe6" +
    "\006\uffe6\045\uffe6\101\uffe6\001\002\000\014\002\uffe3\004" +
    "\uffe3\006\uffe3\045\uffe3\101\uffe3\001\002\000\004\030\217" +
    "\001\002\000\020\007\061\012\062\013\056\021\060\025" +
    "\066\037\057\043\071\001\002\000\014\002\uffdf\004\uffdf" +
    "\006\uffdf\045\uffdf\101\uffdf\001\002\000\032\002\uffe4\004" +
    "\uffe4\006\uffe4\007\061\012\062\013\056\021\060\025\066" +
    "\037\057\043\071\045\uffe4\101\uffe4\001\002\000\016\002" +
    "\uffe1\004\uffe1\006\uffe1\014\120\045\uffe1\101\uffe1\001\002" +
    "\000\014\002\uffe0\004\uffe0\006\uffe0\045\uffe0\101\uffe0\001" +
    "\002\000\004\035\225\001\002\000\014\002\ufff5\004\ufff5" +
    "\005\014\006\ufff5\045\230\001\002\000\012\002\ufff4\004" +
    "\ufff4\005\014\006\ufff4\001\002\000\010\002\ufff2\004\ufff2" +
    "\006\ufff2\001\002\000\004\037\136\001\002\000\014\002" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\045\230\001\002\000\012" +
    "\002\ufff0\004\ufff0\005\ufff0\006\ufff0\001\002\000\010\002" +
    "\ufff3\004\ufff3\006\ufff3\001\002\000\006\002\ufff8\004\ufff8" +
    "\001\002\000\010\002\ufffb\004\ufffb\006\015\001\002\000" +
    "\006\002\ufffa\004\ufffa\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\237\004\005" +
    "\001\001\000\002\001\001\000\006\007\234\010\235\001" +
    "\001\000\006\007\011\010\012\001\001\000\004\010\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\023\015\020\016\022" +
    "\001\001\000\002\001\001\000\010\011\177\015\020\016" +
    "\022\001\001\000\002\001\001\000\010\011\025\015\020" +
    "\016\022\001\001\000\004\010\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\031" +
    "\001\001\000\016\014\176\022\063\026\064\030\067\033" +
    "\066\036\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\052\001\001\000\004\021" +
    "\037\001\001\000\004\023\050\001\001\000\002\001\001" +
    "\000\004\023\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\054\022\063\026\064\030\067\033\066\036\062\001" +
    "\001\000\002\001\001\000\006\021\174\024\175\001\001" +
    "\000\002\001\001\000\004\006\146\001\001\000\006\021" +
    "\102\031\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\111\022\063\026\064\030\067\033\066\036" +
    "\062\001\001\000\016\014\110\022\063\026\064\030\067" +
    "\033\066\036\062\001\001\000\016\014\100\022\063\026" +
    "\064\030\067\033\066\036\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\077\022\063\026\064\030\067\033" +
    "\066\036\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\102\031\103\001\001\000\002\001\001\000" +
    "\016\014\107\022\063\026\064\030\067\033\066\036\062" +
    "\001\001\000\004\023\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\115\022\063\026\064\027\116\030\067\033\066\036\062" +
    "\001\001\000\004\027\144\001\001\000\002\001\001\000" +
    "\010\021\120\024\121\043\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\126\024\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\102\031\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\154\022\063\026\064\030\067\033\066" +
    "\036\062\001\001\000\002\001\001\000\010\021\161\024" +
    "\163\025\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\170\022\063\026\064\030\067\033" +
    "\066\036\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\173\022\063\026\064\030\067\033\066\036" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\205" +
    "\001\001\000\020\014\212\022\063\026\064\027\213\030" +
    "\067\033\066\036\062\001\001\000\002\001\001\000\020" +
    "\014\207\022\063\026\064\027\210\030\067\033\066\036" +
    "\062\001\001\000\004\027\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\217" +
    "\022\063\026\064\030\067\033\066\036\062\001\001\000" +
    "\002\001\001\000\016\014\221\022\063\026\064\030\067" +
    "\033\066\036\062\001\001\000\004\027\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\225\007\226" +
    "\001\001\000\004\007\232\001\001\000\002\001\001\000" +
    "\004\041\230\001\001\000\004\005\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CLASE_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE_GENERAL ::= CLASE_PARTICULAR CLASE_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_GENERAL",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE_GENERAL ::= CLASE_PARTICULAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_GENERAL",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASE_PARTICULAR ::= CLASE VARIABLE_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASE_PARTICULAR ::= CLASE VARIABLE_CLASE PROPIEDAD_CLASE METODO_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASE_PARTICULAR ::= CLASE VARIABLE_CLASE PROPIEDAD_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASE_PARTICULAR ::= CLASE VARIABLE_CLASE METODO_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASE_PARTICULAR ::= CLASE TIPO_DATO 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASE_PARTICULAR ::= CLASE TIPO_DATO PROPIEDAD_CLASE METODO_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASE_PARTICULAR ::= CLASE TIPO_DATO PROPIEDAD_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASE_PARTICULAR ::= CLASE TIPO_DATO METODO_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_PARTICULAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROPIEDAD_CLASE ::= PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDAD_CLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROPIEDAD_CLASE ::= PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDAD_CLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROPIEDAD_CLASE ::= PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES PROPIEDAD_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDAD_CLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROPIEDAD_CLASE ::= PROPIEDADES TIPO_DE_METODOS DOS_PUNTOS PROPIEDAD_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDAD_CLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLES_PROPIEDADES ::= TIPO_DATO VARIABLE_REPETIDAS 
            {
              Object RESULT =null;
		System.out.println("Encontre una variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLES_PROPIEDADES ::= TIPO_DATO VARIABLE_REPETIDAS VARIABLES_PROPIEDADES 
            {
              Object RESULT =null;
		System.out.println("Encontre una variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLE_REPETIDAS ::= VARIABLE 
            {
              Object RESULT =null;
		System.out.println("Encontre una variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_REPETIDAS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLE_REPETIDAS ::= VARIABLE COMA VARIABLE_REPETIDAS 
            {
              Object RESULT =null;
		System.out.println("Encontre una variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_REPETIDAS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODO_CLASE ::= METODOS TIPO_DE_METODOS DOS_PUNTOS METODOS_PARTICULAR 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODO_CLASE ::= METODOS TIPO_DE_METODOS DOS_PUNTOS METODOS_PARTICULAR METODO_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODO_CLASE ::= METODOS TIPO_DE_METODOS DOS_PUNTOS 
            {
              Object RESULT =null;
		System.out.println("Encontre un de clase");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODOS_PARTICULAR ::= METODO_RETORNO 
            {
              Object RESULT =null;
		System.out.println("Encontre Metodos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_PARTICULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODOS_PARTICULAR ::= METODO_EJECUTAR 
            {
              Object RESULT =null;
		System.out.println("Encontre Metodos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_PARTICULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODOS_PARTICULAR ::= METODO_RETORNO METODOS_PARTICULAR 
            {
              Object RESULT =null;
		System.out.println("Encontre Metodos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_PARTICULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODOS_PARTICULAR ::= METODO_EJECUTAR METODOS_PARTICULAR 
            {
              Object RESULT =null;
		System.out.println("Encontre Metodos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_PARTICULAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODO_RETORNO ::= TIPO_DATO VARIABLE PARENTESIS1 PARENTESIS2 DEVOLVER_METODO 
            {
              Object RESULT =null;
		System.out.println("Encontre variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODO_RETORNO ::= TIPO_DATO VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 DEVOLVER_METODO 
            {
              Object RESULT =null;
		System.out.println("Encontre variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODO_RETORNO ::= TIPO_DATO PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;
		System.out.println("Encontre parentesis");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METODO_RETORNO ::= TIPO_DATO VARIABLE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL DEVOLVER_METODO 
            {
              Object RESULT =null;
		System.out.println("Encontre variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METODO_RETORNO ::= TIPO_DATO VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 CODIGO_GENERAL DEVOLVER_METODO 
            {
              Object RESULT =null;
		System.out.println("Encontre variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODO_RETORNO ::= TIPO_DATO PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;
		System.out.println("Encontre parentesis");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODO_RETORNO ::= TIPO_DATO PARENTESIS1 PARENTESIS2 CODIGO_GENERAL DEVOLVER_METODO 
            {
              Object RESULT =null;
		System.out.println("Encontre variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODO_RETORNO ::= TIPO_DATO PRINCIPAL PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;
		System.out.println("Encontre variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEVOLVER_METODO ::= DEVOLVER OPERACION 
            {
              Object RESULT =null;
		System.out.println("Encontre metodo");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEVOLVER_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEVOLVER_METODO ::= DEVOLVER CONCATENACION 
            {
              Object RESULT =null;
		System.out.println("Encontre metodo");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEVOLVER_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEVOLVER_METODO ::= DEVOLVER METODOS_OBJETOS 
            {
              Object RESULT =null;
		System.out.println("Encontre metodo");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEVOLVER_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO_EJECUTAR ::= EJECUTAR VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 
            {
              Object RESULT =null;
		System.out.println("Encontre metodo");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EJECUTAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODO_EJECUTAR ::= EJECUTAR VARIABLE PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;
		System.out.println("Encontre metodo");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EJECUTAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODO_EJECUTAR ::= EJECUTAR VARIABLE PARENTESIS1 VARIABLES_PROPIEDADES2 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;
		System.out.println("Encontre metodo");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EJECUTAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODO_EJECUTAR ::= EJECUTAR VARIABLE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;
		System.out.println("Encontre metodo");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EJECUTAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CODIGO_GENERAL ::= ASIGNACION 
            {
              Object RESULT =null;
		System.out.println("Encontre Asignacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CODIGO_GENERAL ::= LEER_ESCRIBIR 
            {
              Object RESULT =null;
		System.out.println("Encontre Asignacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CODIGO_GENERAL ::= LEER_ESCRIBIR CODIGO_GENERAL 
            {
              Object RESULT =null;
		System.out.println("Encontre Asignacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CODIGO_GENERAL ::= ASIGNACION CODIGO_GENERAL 
            {
              Object RESULT =null;
		System.out.println("Encontre Asignacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CODIGO_GENERAL ::= CONDICION 
            {
              Object RESULT =null;
		System.out.println("Encontre Sentencias");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CODIGO_GENERAL ::= CICLO_FOR 
            {
              Object RESULT =null;
		System.out.println("Encontre Sentencias");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CODIGO_GENERAL ::= INSTANCIAR_CLASE 
            {
              Object RESULT =null;
		System.out.println("Encontre Sentencias");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_GENERAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLES_PROPIEDADES2 ::= TIPO_DATO VARIABLE 
            {
              Object RESULT =null;
		System.out.println("Encontre Variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLES_PROPIEDADES2 ::= TIPO_DATO VARIABLE COMA VARIABLES_PROPIEDADES2 
            {
              Object RESULT =null;
		System.out.println("Encontre Sentencias");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLES_PROPIEDADES2 ::= TIPO_DATO VARIABLE IGUAL OPERACION 
            {
              Object RESULT =null;
		System.out.println("Encontre Sentencias");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= VARIABLE IGUAL OPERACION 
            {
              Object RESULT =null;
		System.out.println("Encontre Operacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= VARIABLE IGUAL CONCATENACION 
            {
              Object RESULT =null;
		System.out.println("Encontre Operacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= VARIABLE IGUAL LOGICO 
            {
              Object RESULT =null;
		System.out.println("Encontre Operacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LEER_ESCRIBIR ::= ESCRIBIR OPERACION 
            {
              Object RESULT =null;
		System.out.println("Encontre Operacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LEER_ESCRIBIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LEER_ESCRIBIR ::= ESCRIBIR CONCATENACION 
            {
              Object RESULT =null;
		System.out.println("Encontre Operacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LEER_ESCRIBIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LEER_ESCRIBIR ::= LEER VARIABLE 
            {
              Object RESULT =null;
		System.out.println("Encontre Variable");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LEER_ESCRIBIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOGICO ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOGICO ::= FALSO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SIGNO_MATE ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SIGNO_MATE ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SIGNO_MATE ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SIGNO_MATE ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SIGNO_MATE ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONCATENACION ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONCATENACION ::= CADENA COMA CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONCATENACION ::= CADENA COMA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION ::= VARIABLE SIGNO_MATE OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION ::= NUMERO_DECIMAL SIGNO_MATE OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICION ::= IF CODIGO_CONDICION ENTONCES CODIGO_GENERAL DEVOLVER_METODO SINO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= IF CODIGO_CONDICION ENTONCES CODIGO_GENERAL SINO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= IF CODIGO_CONDICION ENTONCES DEVOLVER_METODO SINO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CODIGO_CONDICION ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CODIGO_CONDICION ::= VARIABLE SIGNOS NUMERO_DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CICLO_FOR ::= DESDE VARIABLES_PROPIEDADES2 MIENTRAS CODIGO_CONDICION INCREMENTAR NUMERO_DECIMAL HACER CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CICLO_FOR ::= HACER CODIGO_GENERAL MIENTRAS CODIGO_CONDICION CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CICLO_FOR ::= DESDE VARIABLES_PROPIEDADES2 MIENTRAS CODIGO_CONDICION INCREMENTAR NUMERO_DECIMAL HACER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CICLO_FOR ::= HACER CODIGO_GENERAL MIENTRAS CODIGO_CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTANCIAR_CLASE ::= VARIABLE_CLASE VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTANCIAR_CLASE ::= VARIABLE_CLASE VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTANCIAR_CLASE ::= VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTANCIAR_CLASE ::= VARIABLE IGUAL NEW VARIABLE_CLASE PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTANCIAR_CLASE ::= VARIABLE IGUAL NEW TIPO_DATO PARENTESIS1 PARENTESIS2 CODIGO_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTANCIAR_CLASE ::= VARIABLE IGUAL NEW TIPO_DATO PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIAR_CLASE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // METODOS_OBJETOS ::= VARIABLE SIGNOS VARIABLE PARENTESIS1 VARIABLE_REPETIDAS PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_OBJETOS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // METODOS_OBJETOS ::= VARIABLE SIGNOS PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_OBJETOS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
